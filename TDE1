/**
 * Implementação de Máquinas de Estados Finitas Determinísticas (MEFDs) em Arduino
 * MEFD-0: L0 = {x | x ∈ {0,1}* e cada 0 em x é seguido por pelo menos um 1}
 * MEFD-1: L1 = {x | x ∈ {0,1}* e x termina com 00}
 * MEFD-2: L2 = {x | x ∈ {0,1}* e x contém exatamente 3 zeros}
 * MEFD-3: L3 = {x | x ∈ {0,1}* e x inicia com 1}
 * MEFD-4: L4 = {x | x ∈ {0,1}* e x não começa com 1}
 */

// Constantes para pinos
const int PINO_LED_EXTERNO = 6; // LED externo conectado ao pino 6
const int PINO_BTN_0 = 2;        // Botão para entrada 0
const int PINO_BTN_1 = 3;        // Botão para entrada 1
const int PINO_BTN_RESET = 4;    // Botão para resetar
const int PINO_BTN_MEFD = 5;     // Botão para trocar MEFD

// Constantes para os estados das máquinas
const int MAX_ESTADOS = 5;

// Variáveis globais
int MEFD_atual = 0;        // MEFD atual (0-4)
int estado_atual = 0;      // Estado atual da MEFD
bool entrada_completa = false; // Flag para indicar se a entrada está completa

/***************************************************************************/
/*                Tabelas de transição e estados de aceitação              */
/***************************************************************************/
// MEFD-0: L0 = {x | x ∈ {0,1}* e cada 0 em x é seguido por pelo menos um 1}
int transicao_MEFD0[3][2] = {
  {1, 0}, // q0: com 0 → q1, com 1 → q0
  {2, 0}, // q1: com 0 → q2, com 1 → q0
  {2, 2}  // q2: estado de erro permanente
};
bool aceitando_MEFD0[3] = {true, false, false};

// MEFD-1: L1 = {x | x ∈ {0,1}* e x termina com 00}
int transicao_MEFD1[3][2] = {
  {1, 0},
  {2, 0},
  {2, 0}
};
bool aceitando_MEFD1[3] = {false, false, true};

// MEFD-2: L2 = {x | x ∈ {0,1}* e x contém exatamente 3 zeros}
int transicao_MEFD2[5][2] = {
  {1, 0},
  {2, 1},
  {3, 2},
  {4, 3},
  {4, 4}
};
bool aceitando_MEFD2[5] = {false, false, false, true, false};

// MEFD-3: L3 = {x | x ∈ {0,1}* e x inicia com 1}
int transicao_MEFD3[3][2] = {
  {2, 1},
  {1, 1},
  {2, 2}
};
bool aceitando_MEFD3[3] = {false, true, false};

// MEFD-4: L4 = {x | x ∈ {0,1}* e x não começa com 1}
int transicao_MEFD4[3][2] = {
  {1, 2},
  {1, 1},
  {2, 2}
};
bool aceitando_MEFD4[3] = {false, true, false};

/***************************************************************************/
/*                               Configuração                             */
/***************************************************************************/
void setup() {
  // Configuração dos pinos
  pinMode(PINO_LED_EXTERNO, OUTPUT);  // Configura o LED externo
  pinMode(PINO_BTN_0, INPUT_PULLUP);
  pinMode(PINO_BTN_1, INPUT_PULLUP);
  pinMode(PINO_BTN_RESET, INPUT_PULLUP);
  pinMode(PINO_BTN_MEFD, INPUT_PULLUP);

  // Inicialização da comunicação serial
  Serial.begin(9600);

  // Mensagem inicial
  imprimirInformacoesMEFD();
  menuInicial();
}

/***************************************************************************/
/*                               Loop                                      */
/***************************************************************************/
void loop() {
  // Verifica botão para mudar MEFD
  if (digitalRead(PINO_BTN_MEFD) == LOW) {
    delay(50); // Anti-rebote
    if (digitalRead(PINO_BTN_MEFD) == LOW) {
      while (digitalRead(PINO_BTN_MEFD) == LOW); // Espera soltar o botão
      MEFD_atual = (MEFD_atual + 1) % 5;
      resetarMaquina();
      imprimirInformacoesMEFD();
      menuInicial();
    }
  }

  // Verifica botão de reset
  if (digitalRead(PINO_BTN_RESET) == LOW) {
    delay(50); // Anti-rebote
    if (digitalRead(PINO_BTN_RESET) == LOW) {
      while (digitalRead(PINO_BTN_RESET) == LOW); // Espera soltar o botão
      resetarMaquina();
      Serial.println("Máquina resetada. Entre com uma nova sequência.");
    }
  }

  // Processa entrada de 0
  if (digitalRead(PINO_BTN_0) == LOW) {
    delay(50); // Anti-rebote
    if (digitalRead(PINO_BTN_0) == LOW) {
      while (digitalRead(PINO_BTN_0) == LOW); // Espera soltar o botão
      processarEntrada(0);
    }
  }

  // Processa entrada de 1
  if (digitalRead(PINO_BTN_1) == LOW) {
    delay(50); // Anti-rebote
    if (digitalRead(PINO_BTN_1) == LOW) {
      while (digitalRead(PINO_BTN_1) == LOW); // Espera soltar o botão
      processarEntrada(1);
    }
  }

  // Se a entrada estiver completa, verifique a aceitação
  if (entrada_completa) {
    verificarAceitacao();
  }

  // Leitura da entrada serial
  if (Serial.available() > 0) {
    char c = Serial.read();
    if (c == 'r' || c == 'R') {
      resetarMaquina();
      Serial.println("Máquina resetada. Entre com uma nova sequência.");
    } else if (c == 'm' || c == 'M') {
      MEFD_atual = (MEFD_atual + 1) % 5;
      resetarMaquina();
      imprimirInformacoesMEFD();
      menuInicial();
    } else if (c == '0') {
      processarEntrada(0);
    } else if (c == '1') {
      processarEntrada(1);
    } else if (c == 's' || c == 'S') {
      entrada_completa = true;
      verificarAceitacao();
    }
  }
}

/***************************************************************************/
/*                        Funções Auxiliares                               */
/***************************************************************************/
void processarEntrada(int entrada) {
  Serial.print("Entrada: ");
  Serial.println(entrada);

  // Atualiza o estado atual com base na entrada
  switch (MEFD_atual) {
    case 0:
      if (estado_atual < 3) {
        estado_atual = transicao_MEFD0[estado_atual][entrada];
      }
      break;
    case 1:
      if (estado_atual < 3) {
        estado_atual = transicao_MEFD1[estado_atual][entrada];
      }
      break;
    case 2:
      if (estado_atual < 5) {
        estado_atual = transicao_MEFD2[estado_atual][entrada];
      }
      break;
    case 3:
      if (estado_atual < 3) {
        estado_atual = transicao_MEFD3[estado_atual][entrada];
      }
      break;
    case 4:
      if (estado_atual < 3) {
        estado_atual = transicao_MEFD4[estado_atual][entrada];
      }
      break;
  }

  Serial.print("Estado atual: q");
  Serial.println(estado_atual);
}

void verificarAceitacao() {
  bool aceito = false;

  // Verifica se o estado atual é de aceitação conforme o MEFD atual
  switch (MEFD_atual) {
    case 0:
      aceito = aceitando_MEFD0[estado_atual];
      break;
    case 1:
      aceito = aceitando_MEFD1[estado_atual];
      break;
    case 2:
      aceito = aceitando_MEFD2[estado_atual];
      break;
    case 3:
      aceito = aceitando_MEFD3[estado_atual];
      break;
    case 4:
      aceito = aceitando_MEFD4[estado_atual];
      break;
  }

  // Acende o LED externo se aceito, pisca se rejeitado
  if (aceito) {
    digitalWrite(PINO_LED_EXTERNO, HIGH);
    Serial.println("Sequência ACEITA pela máquina!");
  } else {
    piscarLED(3); // Pisca 3 vezes para rejeição
    Serial.println("Sequência REJEITADA pela máquina!");
  }

  // Garante o estado adequado do LED externo
  digitalWrite(PINO_LED_EXTERNO, aceito ? HIGH : LOW);

  delay(10000);

  // Reseta a máquina e retorna ao menu
  resetarMaquina();
  menuInicial();
}

void resetarMaquina() {
  estado_atual = 0;
  entrada_completa = false;
  digitalWrite(PINO_LED_EXTERNO, LOW);
}

void piscarLED(int vezes) {
  for (int i = 0; i < vezes; i++) {
    digitalWrite(PINO_LED_EXTERNO, HIGH);
    delay(600);
    digitalWrite(PINO_LED_EXTERNO, LOW);
    delay(600);
  }
}

void imprimirInformacoesMEFD() {
  Serial.print("Máquina de Estados Atual: MEFD-");
  Serial.println(MEFD_atual);
  Serial.println("Entre com a sequência (0 ou 1) para verificar aceitação.");
}

void menuInicial() {
  Serial.println("--------------------------------");
  Serial.println("Comandos disponíveis:");
  Serial.println("0 - Digitar 0");
  Serial.println("1 - Digitar 1");
  Serial.println("s - Finalizar entrada");
  Serial.println("r - Resetar máquina");
  Serial.println("m - Mudar para próxima MEFD");
  Serial.println("--------------------------------");
  Serial.println("Pronto para receber entrada.");
}
